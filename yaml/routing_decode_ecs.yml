# route traffic according to the provided list of ECS
# and test with dig @192.168.1.16 -p 5753 www.google.com +subnet=10.0.0.1/24

acl:
  - 0.0.0.0/0

binds:
  - listen_address: "0.0.0.0:53"
    reuseport: true
    protocol: Do53
    threads: 2

pools:
  - name: default
  - name: quaddns

backends:
  - address: "1.1.1.1:53"
    protocol: Do53
    pools:
      - default
  - address: "9.9.9.9:53"
    protocol: Do53
    pools:
      - quaddns

query_rules:
  - name: "ecs rule"
    selector:
      type: Lua
      function_name: ECSOptionRule
      function_code: |
        listNmg = newNMG()
        listNmg:addMask("10.0.0.0/8")

        function ECSOptionRule(dq)
          local options = dq:getEDNSOptions()

          if options[EDNSOptionCode.ECS] == nil then
            return false
          end

          if options[EDNSOptionCode.ECS]:count() ~= 1 then
            return false
          end

          local ecs = DecodeECS(options[EDNSOptionCode.ECS]:getValues()[1])
          if ecs == nil then
            return false
          end
          return listNmg:match(ecs)
        end

        function DecodeECS(ecs_data)
          local ip = string.byte(ecs_data:sub(2, 3))
          local netmask = string.byte(ecs_data:sub(3, 4))
          local cs_data = ecs_data:sub(5)
          local cs_table = {}

          -- decode ipv4
          if ip == 1 then
            -- padding to a size of 4
            while #cs_data < 4 do
              cs_data = cs_data .. "\0"
            end
            -- read each byte
            for i = 1, #cs_data, 1 do
              table.insert(cs_table, string.byte(cs_data:sub(i, i)) )
            end
            ca = newCA(table.concat(cs_table, "."))
            ca:truncate(netmask)
            return ca
          end

          -- decode ipv6
          if ip == 2 then
            -- padding to a size of 4
            while #cs_data < 16 do
              cs_data = cs_data .. "\0"
            end
            -- read each 2 bytes
            for i = 1, #cs_data, 2 do
              table.insert(cs_table, string.format("%02X%02X", cs_data:byte(i), cs_data:byte(i+1)) )
            end
            ca = newCA(table.concat(cs_table, ":"))
            ca:truncate(netmask)
            return ca
          end

          -- error, this should not happen
          return
        end 
    action:
      type: Pool
      pool_name: quaddns

  - name: "default rule"
    selector:
      type: All
    action:
      type: Pool
      pool_name: default
